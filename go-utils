#!/bin/bash
#
# Perform formatting, linting, testing and running of
# go code within a folder.

# COLOUR TABLE
# start/end colour: '\x1B'
s='\x1B'
# return font to normal: '[0m'
c='[0m'
# dark mode colour variables - Default
st='[38;5;83m'  # success
it='[96m'       # info
dt='[33m'       # divider/run code
et='[38;5;9m'   # error
wt='[38;5;214m' # warn

# true: all checks passed, false: one or more failed
all_passed='true'
test_file=''

# verbosity
verbose=''

# select colour mode
colour_mode() {
  # light mode colour variables
  if [[ "${1}" == 'light' ]]; then
    st='[38;5;22m'    # success
    it='[38;5;27m'    # info
    dt='[38;5;129m'   # divider/run code
    et='[38;5;9m'     # error
    wt='[38;5;202m'   # warn
  fi
}

# script usage
help() {
  echo './path-to/go-utils [-m <light|dark>] [-v] [-l] [-t] [-r]
    -m  mode light|dark  [ default is dark ]. If running go-utils in a
                          terminal with a dark background, either mode 
                          is fine. If running in a white or light 
                          background, then use the light mode to make 
                          the colours more readable.
      $ ./path-to/go-utils -m light

    Only one of the following args can be run at a time.
    The first arg in the command [ ./path-to/go-utils -rlt ] will 
    only use [-r] before exiting.
    -l  lint files only mode    [ -vl  for verbose linting ]
        $ ./path-to/go-utils -l
    -t  test program only mode  [ -vt  for verbose testing ]
        $ ./path-to/go-utils -t
    -r  run program only mode
        $ ./path-to/go-utils -r
    -v  run command in verbose mode
        $ ./path-to/go-utils -vl
        $ ./path-to/go-utils -vt'
  exit 0
}

# used to run a single command + exit
run_one() { ${1}; exit 0; }

# get all the args
while getopts ':m:ltrv' opt; do
    case "${opt}" in
      m) colour_mode "${OPTARG}";;
      l) run_one "golangci-lint run ${verbose}";;
      t) run_one "go test ./ ${verbose}";;
      r) run_one 'go run main.go';;
      v) verbose='-v';;
      *) help;;
    esac
done

# gofmt -w : format files
format_file() {
  local f
  local test_f
  f="${1}"
  test_f="${f//./_test.}"
  echo -e "[${s}${it} formatting: ${f} ${s}${c}]"
  gofmt -w "${f}"
  if [[ -f "${test_f}" ]]; then
    test_file="${test_f}"
    echo -e "[${s}${it} test file found: ${test_file} ${s}${c}]"
  fi
  echo -e "[${s}${st} finished formatting: ${f} ${s}${c}]"
}

# golangci-lint : lint files
lint_file() {
  local lint
  lint="$(golangci-lint run)"
  if [[ "${lint}" != '' ]]; then
    all_passed='false'
    echo "${lint}"
    echo -e "[${s}${et} linting completed with warnings ${s}${c}]"
  else
    echo -e "[${s}${st} linting completed successfully ${s}${c}]"
  fi
}

# go test : main.go
run_tests() {
  local t
  t="$(go test -race ./...)"
  if [[ "${t}" == *'FAIL:'* ]]; then
    all_passed='false'
    echo "${t}"
    echo -e "[${s}${et} test cases completed with errors ${s}${c}]"
  else
    echo -e "[${s}${st} all test cases completed successfully ${s}${c}]"
  fi
}

# go test -coverprofile : code coverage
code_coverage() {
  local code_cov
  code_cov="$(go test -coverprofile=c.out -covermode=atomic ./...)"
  if [[ "${code_cov}" != *'100.0'* ]]; then
    all_passed='false'
    echo "${code_cov}"
    go tool cover -html=c.out
    echo -e "[${s}${et} code coverage checks completed with warnings ${s}${c}]"
  else
    echo -e "[${s}${st} code coverage: 100% ${s}${c}]"
  fi
}

# go run main.go : run main.go
run_code() {
    echo -e "\n[${s}${dt} running tested files now ${s}${c}]"
    echo -e "[${s}${it} main.go output ${s}${c}]\n"
    go run main.go
}

# main program logic
main() {
  echo 'GO CODE CLEANER & RUNNER'

  echo -e "\n[${s}${it} cleaning code ${s}${c}]"
  echo -e "${s}${dt}-------------------------------------${s}${c}"

  #skip running tests if no go files present
  local files_exist
  files_exist='false'
  # format each file
  for i in *.go; do
    if [[ -f "${i}" ]]; then
      files_exist='true'
      format_file "${i}"
    fi
  done

  # lint files
  if [[ "${files_exist}" != 'false' ]]; then
    lint_file
  else
    local d
    d="$(pwd)"
    echo -e "[${s}${wt} No go files found in ${d} ${s}${c}]"
    all_passed='false'
  fi

  # run the test
  if [[ "${files_exist}" != 'false' ]]; then
    if [[ -f "${test_file}" ]]; then
      run_tests
      code_coverage
    else
      echo -e "[${s}${wt} No test file found ${s}${c}]"
    fi
  fi

  echo -e "${s}${dt}-------------------------------------${s}${c}"

  # run the code
  if [[ "${all_passed}" == 'true' ]]; then
    echo -e "[${s}${st} all code checks completed successfully ${s}${c}]"
    echo -e "${s}${dt}-------------------------------------${s}${c}"
    run_code
  else
    echo -e "[${s}${wt} code checks completed with warnings ${s}${c}]"
    echo -e "${s}${dt}-------------------------------------${s}${c}"
  fi

  exit 0
}

# run main
main
